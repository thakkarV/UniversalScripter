import re
import os
import sys
import argparse
import string as st

def main(args):

	# FIND CURRENT DIR
	CURRENT_DIR = os.path.abspath(os.path.dirname(sys.argv[0]))

	# PARSE CURRENT MOD AND VARIANT OF MODEL BASED ON CURRENT DIR
	re_mod = re.search('Mod([0-9])', CURRENT_DIR)
	mod = re_mod.group(0)

	re_var = re.search('Var([0-9])', CURRENT_DIR)
	var = re_var.group(0)

	# CREATE SCRIPT FILE
	scr = mod + var + "Gen.sh"
	bash = open(scr, 'w+')
	# scr = 'open("' + mod + var + 'Gen.sh", "w+")'
	# bash = eval(scr)

	# WRITE SHELL SCRIPT
	# Bash shell declaration
	bash.write("#!/bin/bash -l\n")

	# Welcome message
	bash.write("# Training Script Autogenerated by UniversalScripter : https://github.com/thakkarV/UniversalScripter\n")
	bash.write("# To be used for training WaveNet models on the BU SCC\n\n")

	# Set project name in the SCC
	bash.write("# Project name\n")
	bash.write("#$ -P " + args.proj_name + " \n\n")

	# Max time to run generation
	bash.write("# Maximum time to run generation job\n")
	bash.write("#$ -l h_rt=" + str(args.max_time_hours) + ":00:00\n\n")

	# Send an email when job begins and ends, and if job is aborted or suspended
	bash.write("# Send an email when the job begins and ends, and if the job is suspended or aborted\n")
	bash.write("#$ -m beas \n\n")

	# Set job name in the SCC
	bash.write("# Job name\n")
	bash.write("#$ -N " + args.job_name + "\n\n")

	# Number of CPU cores to request from the SCC
	bash.write("# Number of CPU cores\n")
	bash.write("#$ -pe omp " + str(args.cores) + "\n\n")

	# Total memory to request from the SCC
	bash.write("# Total job memory\n")
	bash.write("#$ -l mem_total=" + str(args.mem_total) + "G \n\n")

	# Number of GPUs to request from the SCC
	bash.write("# Number of GPUS\n")
	bash.write("#$ -l gpus=" + str(args.num_gpus / args.cores) + "\n\n")

	# Minimum capability of GPU (3.5 for Tesla K40m, 6.0 for Tesla P100...)
	bash.write("# GPU capability\n")
	bash.write("#$ -l gpu_c=" + str(args.gpu_c) + "\n")

	bash.write("\n\n")

	# Load necessary modules in the SCC
	bash.write("# Load necessary modules\n")
	bash.write("module load cuda/8.0\n")
	bash.write("module load cudnn/5.1\n")
	bash.write("module load python/2.7.13\n")
	bash.write("module load tensorflow/r1.0_python-2.7.13\n")

	bash.write("\n")

	# Generation command - python file run + flags
	bash.write("# Generation command\n")
	bash.write("python /projectnb/textconv/WaveNet/Code/tensorflow-wavenet/generate.py \\\n")
	bash.write("\t\t--wav_out_path=/projectnb/textconv/WaveNet/Models/" + mod + "/" + var + "/" + mod + var + "G" + str(args.gen_num) + ".wav \\\n")
	bash.write("\t\t--samples=" + str(args.samples) + " \\\n")
	
	check = "model.ckpt-" + str(args.ckpt)
	bash.write("\t\t--wavenet_params=/projectnb/textconv/WaveNet/Models/" + mod + "/" + var + "/" + mod.lower() + var.lower() + ".json \ \n")
	bash.write("\t\t/projectnb/textconv/WaveNet/Models/" + mod + "/" + var + "/Logs/" + check + " \\\n")

	bash.write("\n")

	bash.close()

	file_name = mod + var + "Gen.sh"
	if args.execute:
		os_command = "qsub " + file_name
		os.system(os_command)

if __name__ == '__main__':

	# Create arguments on command line. Name of job and checkpoint number are required.
	parser = argparse.ArgumentParser(prog = "UniversalTrainer",
	                                description = "Automatic shell script generator for training and generating from WaveNet.")


	parser.add_argument('-gp', '--gpus',
						help = "Total number of GPUs to request for training. Default is one.",
						type = int,
						dest = 'num_gpus',
						default = 1,
						required = False)

	parser.add_argument('-gc', '--gpu_c',
						help = "GPU compute capability. 6.0 for a Tesla P100. Defaults to 3.5 for a Tesla K40m.",
						type = float,
						dest = 'gpu_c',
						default = 3.5,
						required = False)

	parser.add_argument('-c', '--cores',
						help = "Total number of CPU cores to request for training. Default is 4 cores.",
						type = int,
						dest = 'cores',
						default = 4,
						required = False)

	parser.add_argument('-mt', '--mem_total',
						help = "Total amount of RAM to request for training. Default is 32G.",
						type = int,
						dest = 'mem_total',
						default = 32,
						required = False)

	parser.add_argument('-t', '--time',
						help = "Maximum number of hours to train for. Default is 1 week.",
						type = int,
						dest = 'max_time_hours',
						default = 168,
						required = False)

	parser.add_argument('-n', '--name',
						help = "Name of training job.",
						type = str,
						dest = 'job_name',
						default = None,
						required = True)

	parser.add_argument('-p', '--project-name',
						help = "Name of SCC project.",
						type = str,
						dest = 'proj_name',
						default = 'textconv',
						required = False)

	parser.add_argument('-ck', '--ckpt',
						help = "Number of the checkpoint file to generate from.",
						type = int,
						dest = 'ckpt',
						default = None,
						required = True)

	parser.add_argument('-s', '--samples',
						help = "Number of audio samples to generate. 16000 samples corresponds to 1 second of raw audio. Default is 16000.",
						type = int,
						dest = 'samples',
						default = 16000,
						required = False)

	parser.add_argument('-e', '--execute',
						help = "QSUB the generated automatically file if this flag is passed.",
						action = 'store_true',
						required = False)

	parser.add_argument('-ng', '--num_gen',
						help = "Number generation from this model.",
						type = int,
						dest = 'gen_num',
						default = None,
						required = True)

	args = parser.parse_args()

	# Run main to create script
	main(args)