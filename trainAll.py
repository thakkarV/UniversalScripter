import re
import os
import sys
import argparse
import string as st

def main(args):

	# Finding current directory.
	CURRENT_DIR = os.path.abspath(os.path.dirname(sys.argv[0]))

	# Parsing current Mod and Variant of vanilla code based on current directory.
	re_mod = re.search('Mod([0-9])', CURRENT_DIR)

	re_var = re.search('Var([0-9])', CURRENT_DIR)

	# Create script
	file_name = re_mod.group(0) + re_var.group(0) + 'Train.sh'
	params_file_name = re_mod.group(0) + re_var.group(0) + ".json"
	params_file_name = params_file_name.lower()

	file = open(file_name, 'w+')

	newline = '\n'

	# BASH SHELL DECLARATION AND WELCOME MESSAGE
	file.write("#!/bin/bash -l" + newline)
	file.write("# Training Script Autogenerated by UniversalScripter : https://github.com/thakkarV/UniversalScripter" + newline)
	file.write("# To be used for trainig WaveNet models on the BU SCC" + newline + newline)

	# PROJECT NAME
	file.write("# PROJECT NAME" + newline)
	project_string = "#$ -P {}".format(args.proj_name)
	file.write(project_string + newline + newline)

	# JOB TIME
	file.write("# JOB TIME" + newline)
	time_string = "#$ -l h_rt={}:00:00".format(args.max_time_hours)
	file.write(time_string + newline + newline)

	# SEND EMAIL BY DEFAULT
	file.write("# SEND EMAIL BY DEFAULT" + newline)
	file.write("#$ -m beas" + newline + newline)

	# JOB NAME
	file.write("# JOB NAME" + newline)
	name_string = "#$ -N {}".format(re_mod.group(0) + re_var.group(0) + 'Train' if args.job_name is None else args.job_name)
	file.write(name_string + newline + newline)

	# TOTAL CPU CORES
	file.write("# TOTAL CPU CORES" + newline)
	cpu_string = "#$ -pe omp {}".format(args.num_cores)
	file.write(cpu_string + newline + newline)

	# TOTAL MEMORY
	file.write("# TOTAM MEMORY" + newline)
	mem_string = "#$ -l mem_total={}".format(args.mem_total)
	file.write(mem_string + newline + newline)

	# TOTAL GPUS
	file.write("# TOTAL GPUS" + newline)
	num_gpus_string = "#$ -l gpus={}".format(args.num_gpus / args.num_cores)
	file.write(num_gpus_string + newline + newline)

	# GPU COMPUTE CAPABILITY
	file.write("# GPU COMPUTE CAPABILITY" + newline)
	gpus_c_string = "#$ -l gpu_c={}".format(args.gpu_c)
	file.write(gpus_c_string + newline + newline)

	# LOAD SOFTWARE MODULES
	file.write("# LOAD SOFTWARE MODULES" + newline)
	file.write("module load cuda/8.0" + newline)
	file.write("module load cudnn/5.1" + newline)
	file.write("module load python/3.5.1" + newline)
	file.write("module load tensorflow/r1.1_python-3.5.1" + newline + newline)


	# EXECUTION LINE
	file.write("# EXECUTION LINE" + newline)
	code_path = "python /projectnb/{}/WaveNet/Code/tensorflow-wavenet/train.py \\".format(args.proj_name)
	file.write(code_path + newline)
	
	data_path = "--data_dir={} \\".format(args.data_dir)
	file.write(data_path + newline)

	log_path = "--logdir=/projectnb/{}/WaveNet/Models/{}/{}/Logs \\".format(args.proj_name, re_mod.group(0), re_var.group(0))
	file.write(log_path + newline)

	params_path = "--wavenet_params=/projectnb/{}/WaveNet/Models/{}/{}/{} \\" \
					.format(args.proj_name, re_mod.group(0), re_var.group(0), params_file_name)
	file.write(params_path + newline)

	silence_string = "--silence_threshold={}".format(args.silence_threshold)
	file.write(silence_string + newline)

	file.close()

	if args.execute:
		os_command = "qsub {}".format(file_name)
		os.system(os_command)


if __name__ == '__main__':

	# Create arguments on command line. Name of job is required.
	parser = argparse.ArgumentParser(prog = "UniversalTrainer",
	                                description = "Automatic shell script generator for training and generating from WaveNet.")


	parser.add_argument('-gp', '--gpus',
						help = "Total number of GPUs to request for training. Default is one.",
						type = int,
						dest = 'num_gpus',
						default = 1,
						required = False)

	parser.add_argument('-gc', '--gpu-c',
						help = "GPU compute capability. 6.0 for a Tesla P100. Defaults to 3.5 for a Tesla K40m.",
						type = float,
						dest = 'gpu_c',
						default = 3.5,
						required = False)

	parser.add_argument('-c', '--cores',
						help = "Total number of CPU cores to request for training. Default is 4 cores.",
						type = int,
						dest = 'num_cores',
						default = 4,
						required = False)

	parser.add_argument('-mt', '--mem-total',
						help = "Total amount of RAM to request for training. Default is 128G.",
						type = int,
						dest = 'mem_total',
						default = 32,
						required = False)

	parser.add_argument('-t', '--time',
						help = "Maximum number of hours to train for. Default is 1 week.",
						type = int,
						dest = 'max_time_hours',
						default = 168,
						required = False)

	parser.add_argument('-d', '-data',
						help = "Full path to dataset directory. Default is NCS House.",
						type = str,
						dest = 'data_dir',
						default = '/projectnb/textconv/WaveNet/Datasets/NCS/House',
						required = False)

	parser.add_argument('-n', '--name',
						help = "Name of training job. Default is ModxVaryTrain",
						type = str,
						dest = 'job_name',
						default = None,
						required = False)

	parser.add_argument('-p', '--project-name',
						help = "Name of SCC project.",
						type = str,
						dest = 'proj_name',
						default = 'textconv',
						required = False)

	parser.add_argument('-s', '--silence-threshold',
						help = "A value between 0 and 1 of the silence threshold. Defaults to 0.",
						type = float,
						dest = 'silence_threshold',
						default = 0,
						required = False)

	parser.add_argument('-e', '--execute',
						help = "QSUB the generated automatically file if this flag is passed.",
						action = 'store_true',
						required = False)

	args = parser.parse_args()

	# Run main to create script
	main(args)
